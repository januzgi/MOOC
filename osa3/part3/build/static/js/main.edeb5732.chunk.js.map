{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","notesObject","getAll","request","axios","get","nonExisting","id","date","then","r","data","concat","create","newObject","post","update","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","x","map","console","log","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edeb5732.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n\tconst label = note.important\n\t\t? \"make not important\" : \"make important\"\n\n\treturn (\n\t\t<li className=\"note\">\n\t\t\t{note.content}\n\t\t\t<button onClick={toggleImportance}>{label}</button>\n\t\t</li>\n\t)\n}\n\nexport default Note","import React from \"react\"\n\nconst Notification = ({ message }) => {\n\tif (message === null) {\n\t\treturn null\n\t}\n\n\treturn (\n\t\t<div className=\"error\">\n\t\t\t{message}\n\t\t</div>\n\t)\n}\n\nexport default Notification","import axios from \"axios\"\nconst baseUrl = \"/api/notes\"\n\nconst getAll = () => {\n\tconst request = axios.get(baseUrl)\n\tconst nonExisting = {\n\t\tid: 10000,\n\t\tcontent: 'This note is not saved to server',\n\t\tdate: '2019-05-30T17:30:31.098Z',\n\t\timportant: true,\n\t}\n\treturn request.then(r => r.data.concat(nonExisting))\n}\n\nconst create = newObject => {\n\tconst request = axios.post(baseUrl, newObject)\n\treturn request.then(r => r.data)\n}\n\nconst update = (id, newObject) => {\n\tconst request = axios.put(`${baseUrl}/${id}`, newObject)\n\treturn request.then(r => r.data)\n}\n\nconst notesObject = { getAll, create, update }\nexport default notesObject","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\"a new note\")\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(\"Some error happened.\")\n\n  useEffect(() => {\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote(\"\")\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  }\n\n  const toggleImportanceOf = id => {\n    console.log(`Importance of ${id} needs to be toggled.`);\n\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note =>\n          note.id !== id\n            ? note\n            : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note \"${note.content}\" was already removed from server.`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(x => x.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? \"important\" : \"all\"}\n      </button>\n      <ul>\n        {notesToShow.map(x => <Note\n          key={x.id}\n          note={x}\n          toggleImportance={() => toggleImportanceOf(x.id)} />)}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport \"./index.css\"\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <App notes={notes} />,\n  document.getElementById('root')\n)"],"sourceRoot":""}